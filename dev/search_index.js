var documenterSearchIndex = {"docs":
[{"location":"#TSP_MIP.jl-1","page":"Home","title":"TSP_MIP.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Modules = [TSP_MIP]","category":"page"},{"location":"#TSP_MIP.get_optimal_tour-Tuple{AbstractArray{T,1} where T}","page":"Home","title":"TSP_MIP.get_optimal_tour","text":"get_optimal_tour(cities::AbstractVector; verbose = true, distance = euclidean_distance, optimizer = GLPK.Optimizer)\n\nSolves the travelling salesman problem for a list of cities using JuMP by formulating a MILP using the Dantzig-Fulkerson-Johnson formulation and adaptively adding constraints to disallow non-maximal cycles. Returns an optimal tour. Optionally specify a distance metric and an optimizer for JuMP.\n\n\n\n\n\n","category":"method"},{"location":"#TSP_MIP.plot_cities-Tuple{Any}","page":"Home","title":"TSP_MIP.plot_cities","text":"plot_cities(cities)\n\nUses UnicodePlots's lineplot to make a plot of the tour of the cities in cities, in order (including going from the last city back to the first).\n\n\n\n\n\n","category":"method"},{"location":"#TSP_MIP.simple_parse_tsp-Tuple{Any}","page":"Home","title":"TSP_MIP.simple_parse_tsp","text":"simple_parse_tsp(filename; verbose = true)\n\nTry to parse the \".tsp\" file given by filename. Very simple implementation just to be able to test the optimization; may break on other files. Returns a list of cities for use in get_optimal_tour.\n\n\n\n\n\n","category":"method"},{"location":"#TSP_MIP.ATT-Tuple{Any,Any}","page":"Home","title":"TSP_MIP.ATT","text":"ATT(city1, city2)\n\nThe ATT distance measure as specified in TSPLIB: https://www.iwr.uni-heidelberg.de/groups/comopt/software/TSPLIB95/tsp95.pdf.\n\n\n\n\n\n","category":"method"},{"location":"#TSP_MIP.euclidean_distance-Tuple{Any,Any}","page":"Home","title":"TSP_MIP.euclidean_distance","text":"euclidean_distance(city1, city2)\n\nThe usual Euclidean distance measure.\n\n\n\n\n\n","category":"method"},{"location":"#TSP_MIP.find_cycle","page":"Home","title":"TSP_MIP.find_cycle","text":"find_cycle(perm_matrix, starting_ind)\n\nReturns the cycle in the permutation described by perm_matrix which includes starting_ind.\n\n\n\n\n\n","category":"function"},{"location":"#TSP_MIP.get_cycles-Tuple{Any}","page":"Home","title":"TSP_MIP.get_cycles","text":"get_cycles(perm_matrix)\n\nReturns a list of cycles from the permutation described by perm_matrix.\n\n\n\n\n\n","category":"method"},{"location":"#TSP_MIP.plot_tour-Tuple{Any,Any}","page":"Home","title":"TSP_MIP.plot_tour","text":"show_tour(cities, perm_matrix)\n\nShow a plot of the tour described by perm_matrix of the cities in the vector cities.\n\n\n\n\n\n","category":"method"},{"location":"#TSP_MIP.remove_cycles!-Tuple{Any,Any}","page":"Home","title":"TSP_MIP.remove_cycles!","text":"remove_cycles!(model, tour_matrix,\n\nFind the (non-maximal-length) cycles in the current solution tour_matrix and add constraints to the JuMP model to disallow them. Returns the number of cycles found.\n\n\n\n\n\n","category":"method"}]
}
